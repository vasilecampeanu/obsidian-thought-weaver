import esbuild from "esbuild";
import { sassPlugin } from "esbuild-sass-plugin";
import fs from "fs";
import { builtinModules } from "module";
import path from "path";
import process from "process";

const banner = `/* THIS IS A GENERATED/BUNDLED FILE BY ESBUILD */`;

// Determine if we're building for production
const prod = process.argv[2] === "production";

// Plugin to move the generated CSS file to the desired location
function moveStylesPlugin() {
	return {
		name: "move-styles",
		setup(build) {
			build.onEnd(async () => {
				const oldPath = path.join("styles", "styles.css");
				const newPath = "styles.css";
				if (fs.existsSync(oldPath)) {
					try {
						fs.renameSync(oldPath, newPath);
						fs.rmdirSync("styles");
					} catch (error) {
						console.error("Error moving styles.css:", error);
					}
				}
			});
		},
	};
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts", "src/styles/styles.scss"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtinModules,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: "./",
	minify: prod,
	plugins: [sassPlugin(), moveStylesPlugin()],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
